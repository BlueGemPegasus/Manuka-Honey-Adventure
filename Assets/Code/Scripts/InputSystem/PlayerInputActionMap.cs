//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Code/Scripts/InputSystem/PlayerInputActionMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Manuki.Input.System
{
    public partial class @PlayerInputActionMap : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputActionMap()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActionMap"",
    ""maps"": [
        {
            ""name"": ""ManukaInput"",
            ""id"": ""1d582a4c-b213-44cf-9510-77fb78f9bd62"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""56e1a87d-2d99-4f67-8ada-f89ad9ba3587"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Value"",
                    ""id"": ""aca4b2e9-4e3e-42c3-8047-d942a6e04318"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0579ca29-b2f5-4669-be34-6f7a3ec3bb6a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d04a3c49-db7e-4a26-86aa-95c119f0ab7e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""200f3f82-8d20-4e06-8a40-abf34a120ac3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d369c719-9c81-4975-b8e5-1e8396a23d75"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""072a4397-eeae-406d-880e-1f4be370cecb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""30fc0e85-6918-4ce1-823e-966a6debf9fc"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""dc88bd59-1952-4c31-a1aa-0c72a83b0146"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab16058f-e627-4774-b19e-a3a2443fac51"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a07f9e8-d422-4cf5-8992-4369d3957e35"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardMouse"",
            ""bindingGroup"": ""KeyboardMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // ManukaInput
            m_ManukaInput = asset.FindActionMap("ManukaInput", throwIfNotFound: true);
            m_ManukaInput_Movement = m_ManukaInput.FindAction("Movement", throwIfNotFound: true);
            m_ManukaInput_Attack = m_ManukaInput.FindAction("Attack", throwIfNotFound: true);
            m_ManukaInput_Dash = m_ManukaInput.FindAction("Dash", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // ManukaInput
        private readonly InputActionMap m_ManukaInput;
        private IManukaInputActions m_ManukaInputActionsCallbackInterface;
        private readonly InputAction m_ManukaInput_Movement;
        private readonly InputAction m_ManukaInput_Attack;
        private readonly InputAction m_ManukaInput_Dash;
        public struct ManukaInputActions
        {
            private @PlayerInputActionMap m_Wrapper;
            public ManukaInputActions(@PlayerInputActionMap wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_ManukaInput_Movement;
            public InputAction @Attack => m_Wrapper.m_ManukaInput_Attack;
            public InputAction @Dash => m_Wrapper.m_ManukaInput_Dash;
            public InputActionMap Get() { return m_Wrapper.m_ManukaInput; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ManukaInputActions set) { return set.Get(); }
            public void SetCallbacks(IManukaInputActions instance)
            {
                if (m_Wrapper.m_ManukaInputActionsCallbackInterface != null)
                {
                    @Movement.started -= m_Wrapper.m_ManukaInputActionsCallbackInterface.OnMovement;
                    @Movement.performed -= m_Wrapper.m_ManukaInputActionsCallbackInterface.OnMovement;
                    @Movement.canceled -= m_Wrapper.m_ManukaInputActionsCallbackInterface.OnMovement;
                    @Attack.started -= m_Wrapper.m_ManukaInputActionsCallbackInterface.OnAttack;
                    @Attack.performed -= m_Wrapper.m_ManukaInputActionsCallbackInterface.OnAttack;
                    @Attack.canceled -= m_Wrapper.m_ManukaInputActionsCallbackInterface.OnAttack;
                    @Dash.started -= m_Wrapper.m_ManukaInputActionsCallbackInterface.OnDash;
                    @Dash.performed -= m_Wrapper.m_ManukaInputActionsCallbackInterface.OnDash;
                    @Dash.canceled -= m_Wrapper.m_ManukaInputActionsCallbackInterface.OnDash;
                }
                m_Wrapper.m_ManukaInputActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Movement.started += instance.OnMovement;
                    @Movement.performed += instance.OnMovement;
                    @Movement.canceled += instance.OnMovement;
                    @Attack.started += instance.OnAttack;
                    @Attack.performed += instance.OnAttack;
                    @Attack.canceled += instance.OnAttack;
                    @Dash.started += instance.OnDash;
                    @Dash.performed += instance.OnDash;
                    @Dash.canceled += instance.OnDash;
                }
            }
        }
        public ManukaInputActions @ManukaInput => new ManukaInputActions(this);
        private int m_KeyboardMouseSchemeIndex = -1;
        public InputControlScheme KeyboardMouseScheme
        {
            get
            {
                if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardMouse");
                return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
            }
        }
        public interface IManukaInputActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnAttack(InputAction.CallbackContext context);
            void OnDash(InputAction.CallbackContext context);
        }
    }
}
